Строка string не изменяемый
Список list изменяемый li = [23,34,45] li[0] = 28 - 
Кортеж tuples не изменяемый rgb = (255,127,64) rgb[0] #255
Словарь dictionary sl = {'cat':'кошка'} sl['cat'] - поиск 'cat' in dic.keys()
массив array
%= остаток от деления 5%2=1
**= возведение в степень
//= целочисленное деление 11//2=5
len('iulh;gdsf')
tday='Утро'
tday[0]=у
tday[-1] = o
tday[X:Y:Z] XY-интервал Z-шаг
if 2==9:
elif 2==6:
elif 2==7:
else:
x=-x if x<0 else x если условие выполнено, то делаем перед иф, если нет, то делаем после елсе
kids = ["Петя", "Коля", "Миша"]
for kid in reversed(kids):
print(kid) - выведет список наоборот

for id in range(0,100,5):
print(id)  печатает числа от0 до 100 с шагом 5
def schet ():
return
schet(a,b) - вызов

text = 'Пример текста,\nсостоящего из\nнескольких строк'
Пример текста,
состоящего из
нескольких строк

int str float
Функция pow() возводит число в степень. 
x = -5
abs(x)  # вызывает x.__abs__()
# -5 в 3 степени
pow(x, 3)  # вызывает x.__pow__(3)
result = round(10.25, 0)  # 10.0
result = f"First: {text[0]}\nLast: {text[-1]}"
Детерминированная функция возвращает один и тот же результат для одинаковых входных параметров. 
Функция random() возвращает случайное число от 0 до 1 с
Функция type() позволяет определить тип передаваемого аргумента. 
name = 'Python'

# Возвращает индекс первого вхождения буквы в строку
name.find('t')  # 2

# Переводит в нижний регистр
name.lower()  # 'python'

# Заменяет одну подстроку другой
name.replace('on', 'off')  # 'Pythoff'

name = 'Tirion'
print(name.upper())  # => TIRION

# Определение функции
# Определение не вызывает и не выполняет функцию
# Мы лишь говорим, что теперь такая функция существует
def show_greeting():
    # Внутри тела отступ четыре пробела
    text = 'Hello, Hexlet!'
    print(text)

# Вызов функции
show_greeting()  # => 'Hello, Hexlet!'

def greeting_with_code_after_return():
    return 'Hello, Hexlet!'
    print('Я никогда не выполнюсь')
< — меньше
<= — меньше или равно
> — больше
>= — больше или равно
== — равно
!= — не равно

is_empty() — «пустой ли?»
has_errors() — «есть ли ошибки?»
Функция считается предикатом, если она возвращает булевы значения True или False.

def is_even(number):
    return number % 2 == 0

print(is_even(10))      # => True
print(not is_even(10))  # => False